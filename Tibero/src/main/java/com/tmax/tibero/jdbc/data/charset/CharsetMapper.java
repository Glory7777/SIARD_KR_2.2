package com.tmax.tibero.jdbc.data.charset;

import com.tmax.tibero.jdbc.err.TbError;
import java.sql.SQLException;

public class CharsetMapper {
  private CharsetEncoder encoder = null;
  
  private CharsetDecoder decoder = null;
  
  public CharsetMapper(int paramInt) throws SQLException {
    switch (paramInt) {
      case 0:
        this.encoder = new ASCIIEncoder();
        this.decoder = new ASCIIDecoder();
        return;
      case 1:
        this.encoder = new EUCKREncoder();
        this.decoder = new EUCKRDecoder();
        return;
      case 2:
        this.encoder = new MS949Encoder();
        this.decoder = new MS949Decoder();
        return;
      case 3:
        this.encoder = new UTF8Encoder();
        this.decoder = new UTF8Decoder();
        return;
      case 4:
        this.encoder = new UTF16Encoder();
        this.decoder = new UTF16Decoder();
        return;
      case 5:
        this.encoder = new SJISEncoder();
        this.decoder = new SJISDecoder();
        return;
      case 6:
        this.encoder = new JA16SJISEncoder();
        this.decoder = new JA16SJISDecoder();
        return;
      case 7:
      case 27:
        this.encoder = new JA16SJISTILDEEncoder();
        this.decoder = new JA16SJISTILDEDecoder();
        return;
      case 8:
        this.encoder = new EUCJPEncoder();
        this.decoder = new EUCJPDecoder();
        return;
      case 9:
        this.encoder = new EUCJPTILDEEncoder();
        this.decoder = new EUCJPTILDEDecoder();
        return;
      case 10:
        this.encoder = new TCVN3Encoder();
        this.decoder = new TCVN3Decoder();
        return;
      case 11:
        this.encoder = new GBKEncoder();
        this.decoder = new GBKDecoder();
        return;
      case 12:
        this.encoder = new MS1252Encoder();
        this.decoder = new MS1252Decoder();
        return;
      case 13:
      case 28:
      case 29:
        this.encoder = new MS950Encoder();
        this.decoder = new MS950Decoder();
        return;
      case 14:
        this.encoder = new MS1251Encoder();
        this.decoder = new MS1251Decoder();
        return;
      case 15:
        this.encoder = new ISO8859P1Encoder();
        this.decoder = new ISO8859P1Decoder();
        return;
      case 16:
        this.encoder = new ISO8859P2Encoder();
        this.decoder = new ISO8859P2Decoder();
        return;
      case 17:
        this.encoder = new ISO8859P9Encoder();
        this.decoder = new ISO8859P9Decoder();
        return;
      case 18:
        this.encoder = new ISO8859P15Encoder();
        this.decoder = new ISO8859P15Decoder();
        return;
      case 19:
        this.encoder = new KOI8REncoder();
        this.decoder = new KOI8RDecoder();
        return;
      case 20:
        this.encoder = new ISO8859P5Encoder();
        this.decoder = new ISO8859P5Decoder();
        return;
      case 21:
        this.encoder = new CP866Encoder();
        this.decoder = new CP866Decoder();
        return;
      case 22:
        this.encoder = new TIS620Encoder();
        this.decoder = new TIS620Decoder();
        return;
      case 23:
        this.encoder = new SingleByteEncoder(MS1253.c2bIndex1, "\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000£¤¥¦§¨©\000«¬­®\000°±²³\000µ¶·\000\000\000»\000½´¡¢\000¸¹º\000¼\000¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑ\000ÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000¯\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000
        this.decoder = new SingleByteDecoder("€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
        return;
      case 24:
        this.encoder = new SingleByteEncoder(ISO8859P7.c2bIndex1, "\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ \000\000£\000\000¦§¨©\000«¬­\000\000°±²³\000\000\000·\000\000\000»\000½ª\000\000\000\000\000\000\000\000\000´µ¶\000¸¹º\000¼\000¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑ\000ÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000¯\000\000¡¢¤\000\000¥\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", 65280, 255, 8);
        this.decoder = new SingleByteDecoder(" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
        return;
      case 25:
        this.encoder = new SingleByteEncoder(MS1256.c2bIndex1, "\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000¢£¤¥¦§¨©\000«¬­®¯°±²³´µ¶·¸¹\000»¼½¾\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000×\000\000\000\000\000\000\000\000à\000â\000\000\000\000çèéêë\000\000îï\000\000\000\000ô\000\000÷\000ù\000ûü\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000¡\000\000\000\000\000\000\000\000\000\000\000\000\000\000º\000\000\000¿\000ÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛ\000\000\000\000\000ÜÝÞßáãäåæìíðñòóõöøú\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000ª\000\000À\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000ÿ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000ýþ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000
        this.decoder = new SingleByteDecoder("€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
        return;
      case 26:
        this.encoder = new SingleByteEncoder(ISO8859P6.c2bIndex1, "\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ \000\000\000¤\000\000\000\000\000\000\000\000­¬\000\000\000\000\000\000\000\000\000\000\000\000\000\000»\000\000\000¿\000ÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚ\000\000\000\000\000àáâãäåæçèéêëìíîïðñò
        this.decoder = new SingleByteDecoder(" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
        return;
      case 30:
        this.encoder = new GB18030Encoder();
        this.decoder = new GB18030Decoder();
        return;
      case 31:
        this.encoder = new ISO8859P8Encoder();
        this.decoder = new ISO8859P8Decoder();
        return;
      case 32:
        this.encoder = new EUCTWEncoder();
        this.decoder = new EUCTWDecoder();
        return;
    } 
    throw TbError.newSQLException(-590718);
  }
  
  public CharsetMapper(String paramString) throws SQLException {
    this(Charset.getCharset(paramString));
  }
  
  public int bytesToChars(byte[] paramArrayOfbyte, int paramInt1, int paramInt2, char[] paramArrayOfchar, int paramInt3, int paramInt4, boolean paramBoolean) throws SQLException {
    try {
      return paramBoolean ? this.decoder.fixedBytesToChars(paramArrayOfbyte, paramInt1, paramInt2, paramArrayOfchar, paramInt3, paramInt4) : this.decoder.bytesToChars(paramArrayOfbyte, paramInt1, paramInt2, paramArrayOfchar, paramInt3, paramInt4);
    } catch (RuntimeException runtimeException) {
      throw TbError.newSQLException(-90651, runtimeException);
    } 
  }
  
  public String bytesToString(byte[] paramArrayOfbyte, int paramInt1, int paramInt2, boolean paramBoolean) throws SQLException {
    try {
      return paramBoolean ? this.decoder.fixedBytesToString(paramArrayOfbyte, paramInt1, paramInt2) : this.decoder.bytesToString(paramArrayOfbyte, paramInt1, paramInt2);
    } catch (RuntimeException runtimeException) {
      throw TbError.newSQLException(-90651, runtimeException);
    } 
  }
  
  public int charsToBytes(char[] paramArrayOfchar, int paramInt1, int paramInt2, byte[] paramArrayOfbyte, int paramInt3, int paramInt4, boolean paramBoolean) throws SQLException {
    try {
      return paramBoolean ? this.encoder.charsToFixedBytes(paramArrayOfchar, paramInt1, paramInt2, paramArrayOfbyte, paramInt3, paramInt4) : this.encoder.charsToBytes(paramArrayOfchar, paramInt1, paramInt2, paramArrayOfbyte, paramInt3, paramInt4);
    } catch (RuntimeException runtimeException) {
      throw TbError.newSQLException(-90651, runtimeException);
    } 
  }
  
  public int getEndingBytePos(byte[] paramArrayOfbyte, int paramInt) {
    return this.encoder.getEndingBytePos(paramArrayOfbyte, paramInt);
  }
  
  public int getLeadingBytePos(byte[] paramArrayOfbyte, int paramInt) {
    return this.encoder.getLeadingBytePos(paramArrayOfbyte, paramInt);
  }
  
  public int getMaxBytesPerChar() {
    return this.encoder.getMaxBytesPerChar();
  }
  
  public boolean isEndingByte(byte[] paramArrayOfbyte, int paramInt) {
    return this.encoder.isEndingByte(paramArrayOfbyte, paramInt);
  }
  
  public boolean isLeadingByte(byte[] paramArrayOfbyte, int paramInt) {
    return this.encoder.isLeadingByte(paramArrayOfbyte, paramInt);
  }
  
  public byte[] stringToBytes(String paramString) throws SQLException {
    try {
      return this.encoder.stringToBytes(paramString);
    } catch (RuntimeException runtimeException) {
      throw TbError.newSQLException(-90651, runtimeException);
    } 
  }
  
  public int stringToBytes(byte[] paramArrayOfbyte, int paramInt, String paramString) throws SQLException {
    try {
      return this.encoder.stringToBytes(paramArrayOfbyte, paramInt, paramString);
    } catch (RuntimeException runtimeException) {
      throw TbError.newSQLException(-90651, runtimeException);
    } 
  }
}


/* Location:              C:\TmaxData\tibero6\client\lib\jar\tibero6-jdbc.jar!\com\tmax\tibero\jdbc\data\charset\CharsetMapper.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */