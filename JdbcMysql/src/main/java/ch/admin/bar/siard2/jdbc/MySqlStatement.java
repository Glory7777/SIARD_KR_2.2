package ch.admin.bar.siard2.jdbc;

import ch.enterag.sqlparser.identifier.Identifier;
import ch.enterag.sqlparser.identifier.QualifiedId;
import ch.enterag.utils.jdbc.BaseDatabaseMetaData;
import ch.enterag.utils.jdbc.BaseStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;









public class MySqlStatement
  extends BaseStatement
  implements Statement
{
  private MySqlConnection _conn = null;






  
  public MySqlStatement(Statement stmtWrapped, MySqlConnection conn) throws SQLException {
    super(stmtWrapped);
    this._conn = conn;
  }



  
  public Connection getConnection() throws SQLException {
    return this._conn;
  }








  
  private void dropReferencingKeys(QualifiedId qiTable) throws SQLException {
    if (qiTable != null) {
      
      BaseDatabaseMetaData bdmd = (BaseDatabaseMetaData)getConnection().getMetaData();
      ResultSet rs = null;

      
      try { rs = bdmd.getCrossReference(qiTable
            .getCatalog(), bdmd
            .toPattern(qiTable.getSchema()), bdmd
            .toPattern(qiTable.getName()), null, null, "%");
        
        while (rs.next()) {



          
          QualifiedId qiFkTable = new QualifiedId(rs.getString("FKTABLE_CAT"), rs.getString("FKTABLE_SCHEM"), rs.getString("FKTABLE_NAME"));
          Identifier idFkName = new Identifier(rs.getString("FK_NAME"));
          Statement stmt = null;
          
          try {
            stmt = this._conn.createStatement();
            String sSql = "ALTER TABLE " + qiFkTable.format() + " DROP FOREIGN KEY " + idFkName.format();
            stmt.execute(sSql);
          } finally {
            if (stmt != null) stmt.close(); 
          } 
        }  }
      finally { rs.close(); }
    
    } 
  }





  
  private String addPrimaryColumn() throws SQLException {
    String sPrimaryColumn = null;
    QualifiedId qiTable = this._conn.getTableWithoutPrimaryKey();
    if (qiTable != null && getResultSetConcurrency() == 1008) {
      
      BaseDatabaseMetaData bdmd = (BaseDatabaseMetaData)this._conn.getMetaData();
      
      boolean bFound = false;
      int iUnused = 0;
      for (bFound = false; !bFound; iUnused++) {
        
        sPrimaryColumn = "PK" + String.valueOf(iUnused);
        ResultSet rs = bdmd.getColumns(qiTable.getCatalog(), bdmd
            .toPattern(qiTable.getSchema()), bdmd
            .toPattern(qiTable.getName()), sPrimaryColumn);
        
        if (!rs.next())
          bFound = true; 
        rs.close();
      } 
      String sSql = "ALTER TABLE " + qiTable.format() + " ADD " + sPrimaryColumn + " INTEGER UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY FIRST";
      Statement stmt = null;

      
      try { stmt = ((Connection)this._conn.<Connection>unwrap(Connection.class)).createStatement();
        stmt.executeUpdate(sSql); }
      catch (SQLException se)
      { sPrimaryColumn = null; }
      finally { if (stmt != null) stmt.close();  }
    
    }  return sPrimaryColumn;
  }






  
  public void removePrimaryColumn(QualifiedId qiTable, String sPrimaryColumn) throws SQLException {
    if (qiTable != null && sPrimaryColumn != null) {

      
      Statement stmt = null;
      
      try {
        stmt = ((Connection)this._conn.<Connection>unwrap(Connection.class)).createStatement();
        stmt.executeUpdate("ALTER TABLE " + qiTable.format() + " DROP " + sPrimaryColumn);
      } finally {
        if (stmt != null) stmt.close(); 
      }  this._conn.resetTableWithoutPrimaryKey();
    } 
  }






  
  public ResultSet executeQuery(String sql) throws SQLException {
    String sNative = getConnection().nativeSQL(sql);
    String sPrimaryColumn = addPrimaryColumn();
    if (sPrimaryColumn != null) {
      
      int i = sNative.indexOf(this._conn.getTableWithoutPrimaryKey().format());
      i = sNative.substring(0, i).lastIndexOf("FROM");
      for (; Character.isWhitespace(sNative.charAt(--i - 1)); i--);
      String sSelect = sNative.substring(0, i);
      String sFrom = sNative.substring(i);
      sNative = sSelect + ",\r\n" + sPrimaryColumn + sFrom;
    } 
    MySqlResultSet rs = new MySqlResultSet(super.executeQuery(sNative), this._conn);
    rs.setPrimaryColumn(this._conn.getTableWithoutPrimaryKey(), sPrimaryColumn);
    return rs;
  }






  
  public int executeUpdate(String sql) throws SQLException {
    String sNative = getConnection().nativeSQL(sql);
    dropReferencingKeys(this._conn.getTableDropCascade());
    int iResult = super.executeUpdate(sNative);
    this._conn.resetTableDropCascade();
    if (iResult == -1) iResult = 0; 
    return iResult;
  }






  
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    String sNative = getConnection().nativeSQL(sql);
    dropReferencingKeys(this._conn.getTableDropCascade());
    int iResult = super.executeUpdate(sNative, autoGeneratedKeys);
    this._conn.resetTableDropCascade();
    if (iResult == -1) iResult = 0; 
    return iResult;
  }






  
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    String sNative = getConnection().nativeSQL(sql);
    dropReferencingKeys(this._conn.getTableDropCascade());
    int iResult = super.executeUpdate(sNative, columnIndexes);
    this._conn.resetTableDropCascade();
    if (iResult == -1) iResult = 0; 
    return iResult;
  }






  
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    String sNative = getConnection().nativeSQL(sql);
    dropReferencingKeys(this._conn.getTableDropCascade());
    int iResult = super.executeUpdate(sNative, columnNames);
    this._conn.resetTableDropCascade();
    if (iResult == -1) iResult = 0; 
    return iResult;
  }






  
  public ResultSet getResultSet() throws SQLException {
    ResultSet rs = new MySqlResultSet(super.getResultSet(), this._conn);
    return rs;
  }
}


/* Location:              C:\Users\lenovo\IdeaProjects\siard-lib\lib\jdbcmysql-2.2.2.jar!\ch\admin\bar\siard2\jdbc\MySqlStatement.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */