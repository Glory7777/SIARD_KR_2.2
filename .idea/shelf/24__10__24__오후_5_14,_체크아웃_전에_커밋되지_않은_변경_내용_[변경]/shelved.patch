Index: SiardGui/src/main/java/ch/admin/bar/siardsuite/service/database/DbmsRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.admin.bar.siardsuite.service.database;\r\n\r\nimport ch.admin.bar.siardsuite.service.database.model.Dbms;\r\nimport ch.admin.bar.siardsuite.service.database.model.FileBasedDbms;\r\nimport ch.admin.bar.siardsuite.service.database.model.FileBasedDbmsConnectionProperties;\r\nimport ch.admin.bar.siardsuite.service.database.model.ServerBasedDbms;\r\nimport ch.admin.bar.siardsuite.service.database.model.ServerBasedDbmsConnectionProperties;\r\nimport lombok.val;\r\n\r\nimport java.io.File;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\nimport java.util.function.Predicate;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class DbmsRegistry {\r\n\r\n    public static final Collection<Dbms<?>> DBMS = Arrays.asList(\r\n            FileBasedDbms.builder()\r\n                    .name(\"MS Access\")\r\n                    .id(\"access\")\r\n                    .driverClassName(\"ch.admin.bar.siard2.jdbc.AccessDriver\")\r\n                    .jdbcConnectionStringEncoder(config -> String.format(\r\n                            \"jdbc:access:%s\",\r\n                            config.getFile().getAbsolutePath()))\r\n                    .jdbcConnectionStringDecoder(encoded -> {\r\n                        val file = new File(encoded.replace(\"jdbc:access:\", \"\"));\r\n                        return new FileBasedDbmsConnectionProperties(file);\r\n                    })\r\n                    .exampleFile(new File(\"D:\\\\Projekte\\\\SIARD2\\\\JdbcAccess\\\\testfiles\\\\dbfile.mdb\"))\r\n                    .build(),\r\n\r\n            ServerBasedDbms.builder()\r\n                    .name(\"DB/2\")\r\n                    .id(\"db2\")\r\n                    .driverClassName(\"ch.admin.bar.siard2.jdbc.Db2Driver\")\r\n                    .jdbcConnectionStringEncoder(config -> String.format(\r\n                            \"jdbc:db2://%s:%s/%s%s\",\r\n                            config.getHost(),\r\n                            config.getPort(),\r\n                            config.getDbName(),\r\n                            config.getOptions()\r\n                                    .map(optionsString -> \"?\" + optionsString)\r\n                                    .orElse(\"\")))\r\n                    .jdbcConnectionStringDecoder(encoded -> {\r\n                        val splitEncoded = encoded.split(\":\");\r\n                        val splitPortAndDbNameWithOptions = splitEncoded[3].split(\"/\", 2);\r\n                        val splitDbNameAndOptions = splitPortAndDbNameWithOptions[1].split(\"\\\\?\", 2);\r\n\r\n                        return ServerBasedDbmsConnectionProperties.builder()\r\n                                .host(splitEncoded[2].replace(\"//\", \"\"))\r\n                                .port(splitPortAndDbNameWithOptions[0])\r\n                                .dbName(splitDbNameAndOptions[0])\r\n                                .options(splitDbNameAndOptions.length > 1 ? Optional.of(splitDbNameAndOptions[1]) : Optional.empty())\r\n                                .user(\"\")\r\n                                .password(\"\")\r\n                                .build();\r\n                    })\r\n                    .examplePort(\"50000\")\r\n                    .exampleHost(\"db2.exampleHost.org\")\r\n                    .exampleDbName(\"DB2-Database\")\r\n                    .build(),\r\n\r\n            ServerBasedDbms.builder()\r\n                    .name(\"MySQL\")\r\n                    .id(\"mysql\")\r\n                    .driverClassName(\"ch.admin.bar.siard2.jdbc.MySqlDriver\")\r\n                    .jdbcConnectionStringEncoder(config -> String.format(\r\n                            \"jdbc:mysql://%s:%s/%s%s\",\r\n                            config.getHost(),\r\n                            config.getPort(),\r\n                            config.getDbName(),\r\n                            config.getOptions()\r\n                                    .map(optionsString -> \"?\" + optionsString)\r\n                                    .orElse(\"\")))\r\n                    .jdbcConnectionStringDecoder(encoded -> {\r\n                        val splitEncoded = encoded.split(\":\");\r\n                        val splitPortAndDbNameWithOptions = splitEncoded[3].split(\"/\", 2);\r\n                        val splitDbNameAndOptions = splitPortAndDbNameWithOptions[1].split(\"\\\\?\", 2);\r\n\r\n                        return ServerBasedDbmsConnectionProperties.builder()\r\n                                .host(splitEncoded[2].replace(\"//\", \"\"))\r\n                                .port(splitPortAndDbNameWithOptions[0])\r\n                                .dbName(splitDbNameAndOptions[0])\r\n                                .options(splitDbNameAndOptions.length > 1 ? Optional.of(splitDbNameAndOptions[1]) : Optional.empty())\r\n                                .user(\"\")\r\n                                .password(\"\")\r\n                                .build();\r\n                    })\r\n                    .examplePort(\"3306\")\r\n                    .exampleHost(\"mysql.exampleHost.org\")\r\n                    .exampleDbName(\"MySQL-Database\")\r\n                    .build(),\r\n\r\n            ServerBasedDbms.builder()\r\n                    .name(\"Oracle\")\r\n                    .id(\"oracle\")\r\n                    .driverClassName(\"ch.admin.bar.siard2.jdbc.OracleDriver\")\r\n                    .jdbcConnectionStringEncoder(config -> String.format(\r\n                            \"jdbc:oracle:thin:@%s:%s/%s%s\",\r\n                            config.getHost(),\r\n                            config.getPort(),\r\n                            config.getDbName(),\r\n                            config.getOptions()\r\n                                    .map(optionsString -> \"?\" + optionsString)\r\n                                    .orElse(\"\")))\r\n                    .jdbcConnectionStringDecoder(encoded -> {\r\n                        val splitEncoded = encoded.split(\":\");\r\n                        val splitPortAndDbNameWithOptions = splitEncoded[4].split(\"/\", 2);\r\n                        val splitDbNameAndOptions = splitPortAndDbNameWithOptions[1].split(\"\\\\?\", 2);\r\n\r\n                        return ServerBasedDbmsConnectionProperties.builder()\r\n                                .host(splitEncoded[3].replace(\"@\", \"\"))\r\n                                .port(splitPortAndDbNameWithOptions[0])\r\n                                .dbName(splitDbNameAndOptions[0])\r\n                                .options(splitDbNameAndOptions.length > 1 ? Optional.of(splitDbNameAndOptions[1]) : Optional.empty())\r\n                                .user(\"\")\r\n                                .password(\"\")\r\n                                .build();\r\n                    })\r\n                    .examplePort(\"1521\")\r\n                    .exampleHost(\"oracle.exampleHost.org\")\r\n                    .exampleDbName(\"Oracle-Database\")\r\n                    .build(),\r\n\r\n            ServerBasedDbms.builder()\r\n                    .name(\"PostgreSQL\")\r\n                    .id(\"postgresql\")\r\n                    .driverClassName(\"ch.admin.bar.siard2.jdbc.PostgresDriver\")\r\n                    .jdbcConnectionStringEncoder(config -> String.format(\r\n                            \"jdbc:postgresql://%s:%s/%s%s\", // example: \"jdbc:postgresql://localhost/test?user=fred&password=secret&ssl=true\"\r\n                            config.getHost(),\r\n                            config.getPort(),\r\n                            config.getDbName(),\r\n                            config.getOptions()\r\n                                    .map(optionsString -> \"?\" + optionsString)\r\n                                    .orElse(\"\")))\r\n                    .jdbcConnectionStringDecoder(encoded -> {\r\n                        val splitEncoded = encoded.split(\":\");\r\n                        val splitPortAndDbNameWithOptions = splitEncoded[3].split(\"/\", 2);\r\n                        val host = splitEncoded[2].replace(\"//\", \"\");\r\n                        val splitDbNameAndOptions = splitPortAndDbNameWithOptions[1].split(\"\\\\?\", 2);\r\n\r\n                        return ServerBasedDbmsConnectionProperties.builder()\r\n                                .host(host)\r\n                                .port(splitPortAndDbNameWithOptions[0])\r\n                                .dbName(splitDbNameAndOptions[0])\r\n                                .options(Optional.of(splitDbNameAndOptions)\r\n                                        .filter(strings -> strings.length > 1)\r\n                                        .map(strings -> strings[1]))\r\n                                .user(\"\")\r\n                                .password(\"\")\r\n                                .build();\r\n                    })\r\n                    .examplePort(\"5432\")\r\n                    .exampleHost(\"postgresql.exampleHost.org\")\r\n                    .exampleDbName(\"PostgreSQL-Database\")\r\n                    .build(),\r\n\r\n            ServerBasedDbms.builder()\r\n                    .name(\"Microsoft SQL Server\")\r\n                    .id(\"sqlserver\")\r\n                    .driverClassName(\"ch.admin.bar.siard2.jdbc.MsSqlDriver\")\r\n                    .jdbcConnectionStringEncoder(config -> String.format(\r\n                            \"jdbc:sqlserver://%s:%s;databaseName=%s%s\",\r\n                            config.getHost(),\r\n                            config.getPort(),\r\n                            config.getDbName(),\r\n                            config.getOptions()\r\n                                    .map(optionsString -> \";\" + optionsString)\r\n                                    .orElse(\"\")))\r\n                    .jdbcConnectionStringDecoder(encoded -> {\r\n                        val splitEncoded = encoded.split(\":\");\r\n                        val splitPortAndDbNameWithOptions = splitEncoded[3].split(\";\");\r\n\r\n                        val dbName = Arrays.stream(splitPortAndDbNameWithOptions)\r\n                                .skip(1) // contains port\r\n                                .filter(s -> s.startsWith(\"databaseName=\"))\r\n                                .map(s -> s.replace(\"databaseName=\", \"\"))\r\n                                .findAny()\r\n                                .orElseThrow(() -> new IllegalArgumentException(\"Missing database name\"));\r\n\r\n                        val options = Arrays.stream(splitPortAndDbNameWithOptions)\r\n                                .skip(1) // contains port\r\n                                .filter(s -> !s.startsWith(\"databaseName=\"))\r\n                                .collect(Collectors.joining(\";\"));\r\n\r\n                        return ServerBasedDbmsConnectionProperties.builder()\r\n                                .host(splitEncoded[2].replace(\"//\", \"\"))\r\n                                .port(splitPortAndDbNameWithOptions[0])\r\n                                .dbName(dbName)\r\n                                .options(Optional.of(options))\r\n                                .user(\"\")\r\n                                .password(\"\")\r\n                                .build();\r\n                    })\r\n                    .examplePort(\"1433\")\r\n                    .exampleHost(\"mssql.exampleHost.org\")\r\n                    .exampleDbName(\"MS-SQL-Database\")\r\n                    .build(),\r\n\r\n            // TODO:: cubrid, tibero 드라이버 추가 시 경로 및 설정 변경 필요\r\n//            ServerBasedDbms.builder()\r\n//                    .name(\"CUBRID\")\r\n//                    .id(\"cubrid\")\r\n//                    .driverClassName(\"ch.admin.bar.siard2.jdbc.CUBRIDDriver\")\r\n//                    .jdbcConnectionStringEncoder(config -> String.format(\r\n//                            \"jdbc:cubrid:%s:%s:%s:dba::%s?charset=utf8\",\r\n//                            config.getHost(),\r\n//                            config.getPort(),\r\n//                            config.getDbName(),\r\n//                            config.getOptions()\r\n//                                    .map(optionsString -> \"?\" + optionsString)\r\n//                                    .orElse(\"\")))\r\n//                    .jdbcConnectionStringDecoder(encoded -> {\r\n//                        val splitEncoded = encoded.split(\":\");\r\n//                        val splitPortAndDbNameWithOptions = splitEncoded[3].split(\"/\", 2);\r\n//                        val splitDbNameAndOptions = splitPortAndDbNameWithOptions[1].split(\"\\\\?\", 2);\r\n//\r\n//                        return ServerBasedDbmsConnectionProperties.builder()\r\n//                                .host(splitEncoded[2].replace(\"//\", \"\"))\r\n//                                .port(splitPortAndDbNameWithOptions[0])\r\n//                                .dbName(splitDbNameAndOptions[0])\r\n//                                .options(splitDbNameAndOptions.length > 1 ? Optional.of(splitDbNameAndOptions[1]) : Optional.empty())\r\n//                                .user(\"\")\r\n//                                .password(\"\")\r\n//                                .build();\r\n//                    })\r\n//                    .examplePort(\"30000\")\r\n//                    .exampleHost(\"cubrid.exampleHost.org\")\r\n//                    .exampleDbName(\"testDB\")\r\n//                    .build(),\r\n\r\n            ServerBasedDbms.builder()\r\n                    .name(\"CUBRID\")\r\n                    .id(\"cubrid\")\r\n                    .driverClassName(\"ch.admin.bar.siard2.jdbc.CUBRIDDriver\")\r\n                    .jdbcConnectionStringEncoder(config -> {\r\n                        String baseUrl = String.format(\r\n                                \"jdbc:cubrid:%s:%s:%s:%s::\",\r\n                                config.getHost(),\r\n                                config.getPort(),\r\n                                config.getDbName(),\r\n                                config.getUser()\r\n                        );\r\n\r\n                        String options = config.getOptions()\r\n                                .map(opts -> \"?\" + opts)\r\n                                .orElse(\"\");\r\n\r\n                        return baseUrl + options;\r\n                    })\r\n                    .jdbcConnectionStringDecoder(encoded -> {\r\n                        String[] splitEncoded = encoded.split(\":\");\r\n\r\n                        if (splitEncoded.length < 5) {\r\n                            throw new IllegalArgumentException(\"Invalid CUBRID JDBC URL format\");\r\n                        }\r\n\r\n                        String host = splitEncoded[2];\r\n                        String port = splitEncoded[3];\r\n                        String dbName = splitEncoded[4];\r\n                        String user = splitEncoded[5];\r\n\r\n                        String password = \"\"; // 비밀번호가 없거나 필요 없는 경우\r\n\r\n                        String[] parts = splitEncoded[6].split(\"\\\\?\", 2);\r\n                        String options = parts.length > 1 ? parts[1] : \"\";\r\n\r\n                        return ServerBasedDbmsConnectionProperties.builder()\r\n                                .host(host)\r\n                                .port(port)\r\n                                .dbName(dbName)\r\n                                .user(user)\r\n                                .password(password)\r\n                                .options(Optional.of(options))\r\n                                .build();\r\n                    })\r\n                    .examplePort(\"30000\")\r\n                    .exampleHost(\"cubrid.exampleHost.org\")\r\n                    .exampleDbName(\"testDB\")\r\n                    .build(),\r\n\r\n            ServerBasedDbms.builder()\r\n                    .name(\"TIBERO\")\r\n                    .id(\"tibero\")\r\n                    .driverClassName(\"ch.admin.bar.siard2.jdbc.Tibero\")\r\n                    .jdbcConnectionStringEncoder(config -> {\r\n                        // JDBC URL 구성\r\n                        String baseUrl = String.format(\r\n                                \"jdbc:tibero://%s:%s/%s\",\r\n                                config.getHost(),\r\n                                config.getPort(),\r\n                                config.getDbName()\r\n                        );\r\n\r\n                        // 사용자 이름과 비밀번호를 URL의 쿼리 파라미터로 추가\r\n                        String options = String.format(\"?user=%s&password=%s\",\r\n                                config.getUser(),\r\n                                config.getPassword());\r\n\r\n                        return baseUrl + options;\r\n                    })\r\n                    .jdbcConnectionStringDecoder(encoded -> {\r\n                        String[] splitEncoded = encoded.split(\":\");\r\n\r\n                        // URL 형식 검증\r\n                        if (splitEncoded.length < 4) {\r\n                            throw new IllegalArgumentException(\"Invalid TIBERO JDBC URL format\");\r\n                        }\r\n\r\n                        // 호스트, 포트, 데이터베이스 이름 추출\r\n                        String host = splitEncoded[2].replace(\"//\", \"\");\r\n                        String[] portAndDbName = splitEncoded[3].split(\"/\", 2);\r\n                        String port = portAndDbName[0];\r\n                        String dbName = portAndDbName[1].split(\"\\\\?\")[0];\r\n\r\n                        // 쿼리 파라미터 처리\r\n                        String user = \"\";\r\n                        String password = \"\";\r\n\r\n                        if (portAndDbName.length > 1) {\r\n                            String[] options = portAndDbName[1].split(\"&\");\r\n                            for (String option : options) {\r\n                                if (option.startsWith(\"user=\")) {\r\n                                    user = option.substring(\"user=\".length());\r\n                                } else if (option.startsWith(\"password=\")) {\r\n                                    password = option.substring(\"password=\".length());\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        return ServerBasedDbmsConnectionProperties.builder()\r\n                                .host(host)\r\n                                .port(port)\r\n                                .dbName(dbName)\r\n                                .user(user)\r\n                                .password(password)\r\n                                .options(Optional.empty()) // 필요 시 추가 옵션 처리\r\n                                .build();\r\n                    })\r\n                    .examplePort(\"8629\")\r\n                    .exampleHost(\"tibero.exampleHost.org\")\r\n                    .exampleDbName(\"tibero\")\r\n                    .build()\r\n\r\n    );\r\n\r\n    public static Set<String> getSupportedDbms() {\r\n        return DBMS.stream()\r\n                .map(Dbms::getName)\r\n                .collect(Collectors.toSet());\r\n    }\r\n\r\n    public static Dbms<?> findDbmsByName(final String name) {\r\n        return DBMS.stream()\r\n                .filter(dbms -> dbms.getName().equals(name))\r\n                .findAny()\r\n                .orElseThrow(() -> new IllegalArgumentException(\"No DBMS with name \" + name + \" available\"));\r\n    }\r\n\r\n    public static Predicate<String> checkJdbcUrlValidity(final Dbms<?> serverBasedDbms) {\r\n        return nullableValue -> Optional.ofNullable(nullableValue)\r\n                .filter(value -> {\r\n                    if (!value.startsWith(\"jdbc:\" + serverBasedDbms.getId())) {\r\n                        return false;\r\n                    }\r\n\r\n                    try {\r\n                        serverBasedDbms.getJdbcConnectionStringDecoder().apply(value);\r\n                        return true;\r\n                    } catch (Exception e) {\r\n                        return false;\r\n                    }\r\n                })\r\n                .isPresent();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SiardGui/src/main/java/ch/admin/bar/siardsuite/service/database/DbmsRegistry.java b/SiardGui/src/main/java/ch/admin/bar/siardsuite/service/database/DbmsRegistry.java
--- a/SiardGui/src/main/java/ch/admin/bar/siardsuite/service/database/DbmsRegistry.java	(revision 871baf776e29bbc60bfa4114feefb92d44842f47)
+++ b/SiardGui/src/main/java/ch/admin/bar/siardsuite/service/database/DbmsRegistry.java	(date 1729757639022)
@@ -286,7 +286,8 @@
             ServerBasedDbms.builder()
                     .name("TIBERO")
                     .id("tibero")
-                    .driverClassName("ch.admin.bar.siard2.jdbc.Tibero")
+//                    .driverClassName("ch.admin.bar.siard2.jdbc.Tibero")
+                    .driverClassName("com.tmax.jdbc.tibero")
                     .jdbcConnectionStringEncoder(config -> {
                         // JDBC URL 구성
                         String baseUrl = String.format(
Index: .idea/modules/siard-suite.test.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/siard-suite.test.iml b/.idea/modules/siard-suite.test.iml
deleted file mode 100644
--- a/.idea/modules/siard-suite.test.iml	(revision 871baf776e29bbc60bfa4114feefb92d44842f47)
+++ /dev/null	(revision 871baf776e29bbc60bfa4114feefb92d44842f47)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module version="4">
-  <component name="AdditionalModuleElements">
-    <content url="file://$MODULE_DIR$/../../SiardGui/build/generated/sources/annotationProcessor/java/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../SiardGui/build/generated/sources/annotationProcessor/java/test" isTestSource="true" generated="true" />
-    </content>
-  </component>
-</module>
\ No newline at end of file
Index: .idea/modules/siard-suite.main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/siard-suite.main.iml b/.idea/modules/siard-suite.main.iml
deleted file mode 100644
--- a/.idea/modules/siard-suite.main.iml	(revision 871baf776e29bbc60bfa4114feefb92d44842f47)
+++ /dev/null	(revision 871baf776e29bbc60bfa4114feefb92d44842f47)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module version="4">
-  <component name="AdditionalModuleElements">
-    <content url="file://$MODULE_DIR$/../../SiardGui/build/generated/sources/annotationProcessor/java/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../SiardGui/build/generated/sources/annotationProcessor/java/main" isTestSource="false" generated="true" />
-    </content>
-  </component>
-</module>
\ No newline at end of file
Index: SiardGui/settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * This file was generated by the Gradle 'init' task.\r\n */\r\n\r\nrootProject.name = 'siard-suite'\r\ninclude ':SiardCmd', ':SiardApi', ':EnterUtils', ':JdbcCubrid', ':Cubrid'\r\n\r\nproject(':SiardCmd').projectDir = file('../SiardCmd')\r\nproject(':SiardApi').projectDir = file('../SiardApi')\r\nproject(':EnterUtils').projectDir = file('../EnterUtils')\r\nproject(':JdbcCubrid').projectDir = file('../JdbcCubrid')\r\nproject(':Cubrid').projectDir = file('../Cubrid')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SiardGui/settings.gradle b/SiardGui/settings.gradle
--- a/SiardGui/settings.gradle	(revision 871baf776e29bbc60bfa4114feefb92d44842f47)
+++ b/SiardGui/settings.gradle	(date 1729216477617)
@@ -9,4 +9,10 @@
 project(':SiardApi').projectDir = file('../SiardApi')
 project(':EnterUtils').projectDir = file('../EnterUtils')
 project(':JdbcCubrid').projectDir = file('../JdbcCubrid')
-project(':Cubrid').projectDir = file('../Cubrid')
\ No newline at end of file
+project(':Cubrid').projectDir = file('../Cubrid')
+include 'src:test:Tibero'
+findProject(':src:test:Tibero')?.name = 'Tibero'
+includeFlat 'Tibero'
+include '../JdbcTibero/JdbcTibero'
+findProject(':../JdbcTibero/JdbcTibero')?.name = 'JdbcTibero'
+
