package ch.enterag.utils.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;


public abstract class BaseStatement
        implements Statement {
    private Statement _stmtWrapped = null;


    private void throwUndefinedMethod(AbstractMethodError ame) throws SQLFeatureNotSupportedException {
        throw new SQLFeatureNotSupportedException("Undefined JDBC method!", ame);
    }


    public BaseStatement(Statement stmtWrapped) throws SQLException {
        this._stmtWrapped = stmtWrapped;
        if (this._stmtWrapped != null) {
            this._stmtWrapped.setEscapeProcessing(false);
        }
    }


    public Connection getConnection() throws SQLException {
        return this._stmtWrapped.getConnection();
    }


    public ResultSet executeQuery(String sql) throws SQLException {
        return this._stmtWrapped.executeQuery(sql);
    }


    public int executeUpdate(String sql) throws SQLException {
        return this._stmtWrapped.executeUpdate(sql);
    }


    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return this._stmtWrapped.executeUpdate(sql, autoGeneratedKeys);
    }


    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return this._stmtWrapped.executeUpdate(sql, columnIndexes);
    }


    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return this._stmtWrapped.executeUpdate(sql, columnNames);
    }


    public boolean execute(String sql) throws SQLException {
        return this._stmtWrapped.execute(sql);
    }


    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return this._stmtWrapped.execute(sql, autoGeneratedKeys);
    }


    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return this._stmtWrapped.execute(sql, columnIndexes);
    }


    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return this._stmtWrapped.execute(sql, columnNames);
    }


    public void addBatch(String sql) throws SQLException {
        this._stmtWrapped.addBatch(sql);
    }


    public void clearBatch() throws SQLException {
        this._stmtWrapped.clearBatch();
    }


    public int[] executeBatch() throws SQLException {
        return this._stmtWrapped.executeBatch();
    }


    public ResultSet getResultSet() throws SQLException {
        return this._stmtWrapped.getResultSet();
    }


    public int getUpdateCount() throws SQLException {
        return this._stmtWrapped.getUpdateCount();
    }


    public boolean getMoreResults() throws SQLException {
        return this._stmtWrapped.getMoreResults();
    }


    public boolean getMoreResults(int current) throws SQLException {
        return this._stmtWrapped.getMoreResults(current);
    }


    public void close() throws SQLException {
        this._stmtWrapped.close();
    }


    public boolean isClosed() throws SQLException {
        return this._stmtWrapped.isClosed();
    }


    public void closeOnCompletion() throws SQLException {

        try {
            this._stmtWrapped.closeOnCompletion();
        } catch (AbstractMethodError ame) {
            throwUndefinedMethod(ame);
        }

    }


    public boolean isCloseOnCompletion() throws SQLException {
        boolean bCloseOnCompletion = false;
        try {
            bCloseOnCompletion = this._stmtWrapped.isCloseOnCompletion();
        } catch (AbstractMethodError ame) {
            throwUndefinedMethod(ame);
        }
        return bCloseOnCompletion;
    }


    public void cancel() throws SQLException {
        this._stmtWrapped.cancel();
    }


    public int getMaxFieldSize() throws SQLException {
        return this._stmtWrapped.getMaxFieldSize();
    }


    public void setMaxFieldSize(int max) throws SQLException {
        this._stmtWrapped.setMaxFieldSize(max);
    }


    public int getMaxRows() throws SQLException {
        return this._stmtWrapped.getMaxRows();
    }


    public void setMaxRows(int max) throws SQLException {
        this._stmtWrapped.setMaxRows(max);
    }


    public void setEscapeProcessing(boolean enable) throws SQLException {
        this._stmtWrapped.setEscapeProcessing(enable);
    }


    public int getQueryTimeout() throws SQLException {
        return this._stmtWrapped.getQueryTimeout();
    }


    public void setQueryTimeout(int seconds) throws SQLException {
        this._stmtWrapped.setQueryTimeout(seconds);
    }


    public SQLWarning getWarnings() throws SQLException {
        return this._stmtWrapped.getWarnings();
    }


    public void clearWarnings() throws SQLException {
        this._stmtWrapped.clearWarnings();
    }


    public void setCursorName(String name) throws SQLException {
        this._stmtWrapped.setCursorName(name);
    }


    public void setFetchDirection(int direction) throws SQLException {
        this._stmtWrapped.setFetchDirection(direction);
    }


    public int getFetchDirection() throws SQLException {
        return this._stmtWrapped.getFetchDirection();
    }


    public void setFetchSize(int rows) throws SQLException {
        this._stmtWrapped.setFetchSize(rows);
    }


    public int getFetchSize() throws SQLException {
        return this._stmtWrapped.getFetchSize();
    }


    public int getResultSetConcurrency() throws SQLException {
        return this._stmtWrapped.getResultSetConcurrency();
    }


    public int getResultSetType() throws SQLException {
        return this._stmtWrapped.getResultSetType();
    }


    public ResultSet getGeneratedKeys() throws SQLException {
        return this._stmtWrapped.getGeneratedKeys();
    }


    public int getResultSetHoldability() throws SQLException {
        return this._stmtWrapped.getResultSetHoldability();
    }


    public void setPoolable(boolean poolable) throws SQLException {
        this._stmtWrapped.setPoolable(poolable);
    }


    public boolean isPoolable() throws SQLException {
        return this._stmtWrapped.isPoolable();
    }


    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return (iface == Statement.class);
    }


    public <T> T unwrap(Class<T> iface) throws SQLException {
        Statement statement = null;
        T wrapped = null;
        if (isWrapperFor(iface))
            statement = this._stmtWrapped;
        return (T) statement;
    }
}


/* Location:              C:\Users\lenovo\IdeaProjects\siard-lib\lib\jdbcbase.jar!\ch\entera\\utils\jdbc\BaseStatement.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */